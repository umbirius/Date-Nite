{"ast":null,"code":"var _jsxFileName = \"/Users/umbertopalazzo/Development/code/redux-final-project/frontend/src/containers/AppointmentContainer.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchAppointments } from '../actions/fetchAppointments';\nimport Appointments from '../components/appointments/Appointments';\nimport { requestDate } from '../actions/requestDate';\n\nclass AppointmentContainer extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.componentDidMount = () => {\n      this.props.fetchAppointments();\n    };\n  }\n\n  render() {\n    // debugger\n    let open_appointments = this.props.appointments.filter(appointment => appointment.establishment_id == this.props.establishment && appointment.status === false).sort(dateSort);\n    console.log(\"Appointments Container:\");\n    console.log(open_appointments);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Appointments, {\n      current_user: this.props.current_user,\n      open_appointments: open_appointments,\n      requestDate: this.props.requestDate,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  establishments: state.establishments,\n  loading: state.loading,\n  current_user: state.current_user,\n  appointments: state.appointments\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchAppointments: () => dispatch(fetchAppointments()),\n  requestDate: props => dispatch(requestDate(props))\n});\n\nfunction dateSort(a, b) {\n  const dateA = a.when;\n  const dateB = b.when;\n  let comparison = 0;\n\n  if (dateA > dateB) {\n    comparison = 1;\n  } else if (dateA < dateB) {\n    comparison = -1;\n  }\n\n  return comparison;\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AppointmentContainer);","map":{"version":3,"sources":["/Users/umbertopalazzo/Development/code/redux-final-project/frontend/src/containers/AppointmentContainer.js"],"names":["React","Component","connect","fetchAppointments","Appointments","requestDate","AppointmentContainer","componentDidMount","props","render","open_appointments","appointments","filter","appointment","establishment_id","establishment","status","sort","dateSort","console","log","current_user","mapStateToProps","state","establishments","loading","mapDispatchToProps","dispatch","a","b","dateA","when","dateB","comparison"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,iBAAT,QAAkC,8BAAlC;AACA,OAAOC,YAAP,MAAyB,yCAAzB;AACA,SAASC,WAAT,QAA4B,wBAA5B;;AAEA,MAAMC,oBAAN,SAAmCL,SAAnC,CAA6C;AAAA;AAAA;;AAAA,SAGzCM,iBAHyC,GAGrB,MAAM;AACtB,WAAKC,KAAL,CAAWL,iBAAX;AAEH,KANwC;AAAA;;AAUzCM,EAAAA,MAAM,GAAG;AACL;AACA,QAAIC,iBAAiB,GAAG,KAAKF,KAAL,CAAWG,YAAX,CAAwBC,MAAxB,CAA+BC,WAAW,IAAIA,WAAW,CAACC,gBAAZ,IAAgC,KAAKN,KAAL,CAAWO,aAA3C,IAA4DF,WAAW,CAACG,MAAZ,KAAuB,KAAjI,EAAwIC,IAAxI,CAA6IC,QAA7I,CAAxB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYV,iBAAZ;AACA,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,YAAD;AAAc,MAAA,YAAY,EAAE,KAAKF,KAAL,CAAWa,YAAvC;AAAqD,MAAA,iBAAiB,EAAEX,iBAAxE;AAA2F,MAAA,WAAW,EAAE,KAAKF,KAAL,CAAWH,WAAnH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ;AAIH;;AAnBwC;;AAsB7C,MAAMiB,eAAe,GAAGC,KAAK,KAAK;AAC9BC,EAAAA,cAAc,EAAED,KAAK,CAACC,cADQ;AAE9BC,EAAAA,OAAO,EAAEF,KAAK,CAACE,OAFe;AAG9BJ,EAAAA,YAAY,EAAEE,KAAK,CAACF,YAHU;AAI9BV,EAAAA,YAAY,EAAEY,KAAK,CAACZ;AAJU,CAAL,CAA7B;;AAQA,MAAMe,kBAAkB,GAAGC,QAAQ,KAAK;AACpCxB,EAAAA,iBAAiB,EAAE,MAAMwB,QAAQ,CAACxB,iBAAiB,EAAlB,CADG;AAEpCE,EAAAA,WAAW,EAAGG,KAAD,IAAWmB,QAAQ,CAACtB,WAAW,CAACG,KAAD,CAAZ;AAFI,CAAL,CAAnC;;AAKA,SAASU,QAAT,CAAkBU,CAAlB,EAAqBC,CAArB,EAAwB;AAEpB,QAAMC,KAAK,GAAGF,CAAC,CAACG,IAAhB;AACA,QAAMC,KAAK,GAAGH,CAAC,CAACE,IAAhB;AAEA,MAAIE,UAAU,GAAG,CAAjB;;AACA,MAAIH,KAAK,GAAGE,KAAZ,EAAmB;AACfC,IAAAA,UAAU,GAAG,CAAb;AACH,GAFD,MAEO,IAAIH,KAAK,GAAGE,KAAZ,EAAmB;AACtBC,IAAAA,UAAU,GAAG,CAAC,CAAd;AACH;;AACD,SAAOA,UAAP;AAEH;;AAED,eAAe/B,OAAO,CAACoB,eAAD,EAAkBI,kBAAlB,CAAP,CAA6CpB,oBAA7C,CAAf","sourcesContent":["import React, { Component } from 'react'\n\nimport { connect } from 'react-redux'\nimport { fetchAppointments } from '../actions/fetchAppointments'\nimport Appointments from '../components/appointments/Appointments'\nimport { requestDate } from '../actions/requestDate'\n\nclass AppointmentContainer extends Component {\n\n\n    componentDidMount = () => {\n        this.props.fetchAppointments()\n\n    }\n\n\n\n    render() {\n        // debugger\n        let open_appointments = this.props.appointments.filter(appointment => appointment.establishment_id == this.props.establishment && appointment.status === false).sort(dateSort)\n        console.log(\"Appointments Container:\")\n        console.log(open_appointments)\n        return (\n            <div>\n                <Appointments current_user={this.props.current_user} open_appointments={open_appointments} requestDate={this.props.requestDate} />\n            </div>)\n    }\n}\n\nconst mapStateToProps = state => ({\n    establishments: state.establishments,\n    loading: state.loading,\n    current_user: state.current_user,\n    appointments: state.appointments\n})\n\n\nconst mapDispatchToProps = dispatch => ({\n    fetchAppointments: () => dispatch(fetchAppointments()),\n    requestDate: (props) => dispatch(requestDate(props))\n})\n\nfunction dateSort(a, b) {\n\n    const dateA = a.when;\n    const dateB = b.when;\n\n    let comparison = 0;\n    if (dateA > dateB) {\n        comparison = 1;\n    } else if (dateA < dateB) {\n        comparison = -1;\n    }\n    return comparison;\n\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AppointmentContainer)"]},"metadata":{},"sourceType":"module"}