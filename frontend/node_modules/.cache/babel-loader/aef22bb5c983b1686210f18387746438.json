{"ast":null,"code":"/**\n * cuid.js\n * Collision-resistant UID generator for browsers and node.\n * Sequential for fast db lookups and recency sorting.\n * Safe for element IDs and server-side lookups.\n *\n * Extracted from CLCTR\n *\n * Copyright (c) Eric Elliott 2012\n * MIT License\n */\n\n/*global window, navigator, document, require, process, module */\n(function (app) {\n  'use strict';\n\n  var namespace = 'cuid',\n      c = 0,\n      blockSize = 4,\n      base = 36,\n      discreteValues = Math.pow(base, blockSize),\n      pad = function pad(num, size) {\n    var s = \"000000000\" + num;\n    return s.substr(s.length - size);\n  },\n      randomBlock = function randomBlock() {\n    return pad((Math.random() * discreteValues << 0).toString(base), blockSize);\n  },\n      safeCounter = function () {\n    c = c < discreteValues ? c : 0;\n    c++; // this is not subliminal\n\n    return c - 1;\n  },\n      api = function cuid() {\n    // Starting with a lowercase letter makes\n    // it HTML element ID friendly.\n    var letter = 'c',\n        // hard-coded allows for sequential access\n    // timestamp\n    // warning: this exposes the exact date and time\n    // that the uid was created.\n    timestamp = new Date().getTime().toString(base),\n        // Prevent same-machine collisions.\n    counter,\n        // A few chars to generate distinct ids for different\n    // clients (so different computers are far less\n    // likely to generate the same id)\n    fingerprint = api.fingerprint(),\n        // Grab some more chars from Math.random()\n    random = randomBlock() + randomBlock();\n    counter = pad(safeCounter().toString(base), blockSize);\n    return letter + timestamp + counter + fingerprint + random;\n  };\n\n  api.slug = function slug() {\n    var date = new Date().getTime().toString(36),\n        counter,\n        print = api.fingerprint().slice(0, 1) + api.fingerprint().slice(-1),\n        random = randomBlock().slice(-2);\n    counter = safeCounter().toString(36).slice(-4);\n    return date.slice(-2) + counter + print + random;\n  };\n\n  api.globalCount = function globalCount() {\n    // We want to cache the results of this\n    var cache = function calc() {\n      var i,\n          count = 0;\n\n      for (i in window) {\n        count++;\n      }\n\n      return count;\n    }();\n\n    api.globalCount = function () {\n      return cache;\n    };\n\n    return cache;\n  };\n\n  api.fingerprint = function browserPrint() {\n    return pad((navigator.mimeTypes.length + navigator.userAgent.length).toString(36) + api.globalCount().toString(36), 4);\n  }; // don't change anything from here down.\n\n\n  if (app.register) {\n    app.register(namespace, api);\n  } else if (typeof module !== 'undefined') {\n    module.exports = api;\n  } else {\n    app[namespace] = api;\n  }\n})(this.applitude || this);","map":{"version":3,"sources":["/Users/umbertopalazzo/Development/code/redux-final-project/frontend/node_modules/cuid/dist/browser-cuid.js"],"names":["app","namespace","c","blockSize","base","discreteValues","Math","pow","pad","num","size","s","substr","length","randomBlock","random","toString","safeCounter","api","cuid","letter","timestamp","Date","getTime","counter","fingerprint","slug","date","print","slice","globalCount","cache","calc","i","count","window","browserPrint","navigator","mimeTypes","userAgent","register","module","exports","applitude"],"mappings":"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","sourcesContent":["/**\n * cuid.js\n * Collision-resistant UID generator for browsers and node.\n * Sequential for fast db lookups and recency sorting.\n * Safe for element IDs and server-side lookups.\n *\n * Extracted from CLCTR\n *\n * Copyright (c) Eric Elliott 2012\n * MIT License\n */\n\n/*global window, navigator, document, require, process, module */\n(function (app) {\n  'use strict';\n  var namespace = 'cuid',\n    c = 0,\n    blockSize = 4,\n    base = 36,\n    discreteValues = Math.pow(base, blockSize),\n\n    pad = function pad(num, size) {\n      var s = \"000000000\" + num;\n      return s.substr(s.length-size);\n    },\n\n    randomBlock = function randomBlock() {\n      return pad((Math.random() *\n            discreteValues << 0)\n            .toString(base), blockSize);\n    },\n\n    safeCounter = function () {\n      c = (c < discreteValues) ? c : 0;\n      c++; // this is not subliminal\n      return c - 1;\n    },\n\n    api = function cuid() {\n      // Starting with a lowercase letter makes\n      // it HTML element ID friendly.\n      var letter = 'c', // hard-coded allows for sequential access\n\n        // timestamp\n        // warning: this exposes the exact date and time\n        // that the uid was created.\n        timestamp = (new Date().getTime()).toString(base),\n\n        // Prevent same-machine collisions.\n        counter,\n\n        // A few chars to generate distinct ids for different\n        // clients (so different computers are far less\n        // likely to generate the same id)\n        fingerprint = api.fingerprint(),\n\n        // Grab some more chars from Math.random()\n        random = randomBlock() + randomBlock();\n\n        counter = pad(safeCounter().toString(base), blockSize);\n\n      return  (letter + timestamp + counter + fingerprint + random);\n    };\n\n  api.slug = function slug() {\n    var date = new Date().getTime().toString(36),\n      counter,\n      print = api.fingerprint().slice(0,1) +\n        api.fingerprint().slice(-1),\n      random = randomBlock().slice(-2);\n\n      counter = safeCounter().toString(36).slice(-4);\n\n    return date.slice(-2) +\n      counter + print + random;\n  };\n\n  api.globalCount = function globalCount() {\n    // We want to cache the results of this\n    var cache = (function calc() {\n        var i,\n          count = 0;\n\n        for (i in window) {\n          count++;\n        }\n\n        return count;\n      }());\n\n    api.globalCount = function () { return cache; };\n    return cache;\n  };\n\n  api.fingerprint = function browserPrint() {\n    return pad((navigator.mimeTypes.length +\n      navigator.userAgent.length).toString(36) +\n      api.globalCount().toString(36), 4);\n  };\n\n  // don't change anything from here down.\n  if (app.register) {\n    app.register(namespace, api);\n  } else if (typeof module !== 'undefined') {\n    module.exports = api;\n  } else {\n    app[namespace] = api;\n  }\n\n}(this.applitude || this));\n"]},"metadata":{},"sourceType":"script"}